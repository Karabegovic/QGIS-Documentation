# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, QGIS project
# This file is distributed under the same license as the QGIS Documentation Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: QGIS Documentation Project 1.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-02-28 13:03\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:9
# 5f6a98934f974ab2aa98100b27ae7e5b
msgid "Network analysis library"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:11
# b2cc517a31864206a4ade6d3d1fbca20
msgid "Starting from revision `ee19294562 <https://github.com/qgis/Quantum-GIS/commit/ee19294562b00c6ce957945f14c1727210cffdf7>`_ (QGIS >= 1.8) the new network analysis library was added to the QGIS core analysis library. The library:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:15
# 468389cee5b34d0b84a9fd2e72348dee
msgid "creates mathematical graph from geographical data (polyline vector layers)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:16
# 9424287a82a342b7b21cf606b5f28ee1
msgid "implements basics method of the graph theory (currently only Dijkstra's algorithm)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:19
# 3f89e39e20644f3cb3c26cba91c5db28
msgid "Network analysis library was created by exporting basics functions from RoadGraph core plugin and now you can use it's methods in plugins or directly from Python console."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:24
# cc70c4f26d264464be59cfecf2d6f816
msgid "General information"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:26
# faae80bbe8a44786843293990bf79f1b
msgid "Briefly typical use case can be described as:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:28
# 9ae5ae9d9a0f4e068d81f746ef586139
msgid "create graph from geodata (usually polyline vector layer)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:29
# 160600d9ea6b4a9fbe17089cd47a2efa
msgid "run graph analysis"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:30
# 0cc81b13fcfa46279f9cd00cce62c9f4
msgid "use analysis results (for example, visualize them)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:33
# 5d86684371f54ac5862f9c2671d942ce
msgid "Building graph"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:35
# d4c6322d03204c75826049ce8e866502
msgid "The first thing you need to do --- is to prepare input data, that is to convert vector layer into graph. All further actions will use this graph, not the layer."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:39
# fae13c10cb3b480fb07566152ec0fe2f
msgid "As a source we can use any polyline vector layer. Nodes of the polylines become graph vertices, and segments of the polylines are graph edges. If several nodes have the same coordinates then they are the same graph vertex. So two lines that have a common node become connected to each other."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:44
# f3498efcb8e7422d8dabe6ae4d0cb34d
msgid "Additionally, during graph creation it is possible to \"fix\" (\"tie\") to the input vector layer any number of additional points. For each additional point a match will be foundÂ --- closest graph vertex or closest graph edge. In the latter case the edge will be splitted and new vertex added."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:49
# 46fb46df1dc54a6bbf608bf5bc9a1242
msgid "As the properties of the edge a vector layer attributes can be used and length of the edge."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:52
# 2403f461b8dd4333831015f785d6bcef
msgid "Converter from vector layer to graph is developed using `Builder <http://en.wikipedia.org/wiki/Builder_pattern>`_ programming pattern. For graph construction response so-called Director. There is only one Director for now: `QgsLineVectorLayerDirector <http://qgis.org/api/api/classQgsLineVectorLayerDirector.html>`_. The director sets the basic settings that will be used to construct a graph from a line vector layer, used by the builder to create graph. Currently, as in the case with the director, only one builder exists: `QgsGraphBuilder <http://qgis.org/api/api/classQgsGraphBuilder.html>`_, that creates `QgsGraph <http://qgis.org/api/api/classQgsGraph.html>`_ objects. You may want to implement your own builders that will build a graphs compatible with such libraries as `BGL <http://www.boost.org/doc/libs/1_48_0/libs/graph/doc/index.html>`_ or `NetworkX <http://networkx.lanl.gov/>`_."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:63
# 1923b89576114947b4170c146991e92a
msgid "To calculate edge properties programming pattern `strategy <http://en.wikipedia.org/wiki/Strategy_pattern>`_ is used. For now only `QgsDistanceArcProperter <http://qgis.org/api/api/classQgsDistanceArcProperter.html>`_ strategy is available, that takes into account the length of the route. You can implement your own strategy that will use all necessary parameters. For example, RoadGraph plugin uses strategy that compute travel time using edge length and speed value from attributes."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:70
# 783f8791baf3424c85ff9a9ae38ccf70
msgid "It's time to dive in the process."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:72
# f68ae064a56c49e18dce6368947e8f5e
msgid "First of all, to use this library we should import networkanalysis module::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:76
# 0207006920c64b97950f5059ee148fb4
msgid "Than create director::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:89
# e2eae14bea574f28b2305d706cffdcc0
msgid "To construct a director  we should pass vector layer, that will be used as source for graph and information about allowed movement on each road segment (unilateral or bilateral movement, direct or reverse direction). Here is full list of this parameters:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:94
# 9a4b01dd38c545f8ae2eb5666c279872
msgid "vl --- vector layer used to build graph"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:95
# 9c74b73a4eb24c0f836a47bf2d2c0a0c
msgid "directionFieldId --- index of the attribute table field, where information about roads directions is stored. If -1, then don't use this info at all"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:97
# d4b06616b24f45c59214c9dfe8bafb3c
msgid "directDirectionValue --- field value for roads with direct direction (moving from first line point to last one)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:99
# bb1a9c6233b74eafb26ee68718b0181a
msgid "reverseDirectionValue --- field value for roads with reverse direction (moving from last line point to first one)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:101
# 1b3b2473d3e741c8b1732bf1b577c883
msgid "bothDirectionValue --- field value for bilateral roads (for such roads we can move from first point to last and from last to first)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:103
# d4871183ebd0448a8ebbaad447070ad4
msgid "defaultDirection --- default road direction. This value will be used for those roads where field directionFieldId is not set or have some value different from above."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:107
# 8f5a96f55a36439d92ed4aad7e79e6c5
msgid "It is necessary then to create strategy for calculating edge properties::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:111
# 462f909448e64c109720b67018220b23
msgid "And tell the director about this strategy::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:115
# b13ab717adc14c8195f8be016fa1b7eb
msgid "Now we can create builder, which will create graph. QgsGraphBuilder constructor takes several arguments:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:118
# dfe8e61f5f36449ca7344544564d2aca
msgid "crs --- coordinate reference system to use. Mandatory argument."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:119
# 13c32daaebed489db0483b2fab81345d
msgid "otfEnabled --- use \"on the fly\" reprojection or no. By default const:`True` (use OTF)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:121
# 6223373dbbe247d983c312fe1b4b5be7
msgid "topologyTolerance --- topological tolerance. Default value is 0."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:122
# c58e397b62b047fda95efa42d07ef78e
msgid "ellipsoidID --- ellipsoid to use. By default \"WGS84\"."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:129
# 526105ce31a94b65b74ef56f7fa62d47
msgid "Also  we can set several points, which will be used in analysis. For example::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:134
# 5b7d7d4ddff148b2b351436d4503aab6
msgid "Now all is in place so we can build graph and \"tie\" points to it::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:138
# 860584d1f06d40ab9f19b21f675ee515
msgid "Building graph can take some time (depends on number of features in a layer and layer size). tiedPoints is a list with coordinates of \"tied\" points. When build operation is finished we can get graph and use it for the analysis::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:144
# 9994f67e6e034f9b99c99c6a1e6db243
msgid "With the next code we can get indexes of our points::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:151
# a8e765412fa44d73ae4f3f200c62a215
msgid "Graph analysis"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:153
# 8128f24aec6240a78fec3180acad3125
msgid "Networks analysis is used to find answers on two questions: which vertices are connected and how to find a shortest path. To solve this problems network analysis library provides Dijkstra's algorithm."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:157
# 542ae4ccadbc4b8b97aee521bb7329df
msgid "Dijkstra's algorithm finds the best route from one of the vertices of the graph to all the others and the values of the optimization parameters. The results can be represented as shortest path tree."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:161
# 6e358d8dbe3b4b159690a9a0a71e6cdf
msgid "The shortest path tree is as oriented weighted graph (or more precisely --- tree) with the following properties:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:164
# f3a6cf1c82e640fe825119468c3678f1
msgid "only one vertex have no incoming edges â the root of the tree"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:165
# e94dcd20dece46088abcb6f8ec5ede24
msgid "all other vertices have only one incoming edge"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:166
# f54076462d72421cb765e887ef9172e4
msgid "if vertex B is reachable from vertex A, then path from A to B is single available path and it is optimal (shortest) on this graph"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:169
# fb6a31612f184f75b607a08e737c2228
msgid "To get shortest path tree use methods Use methods :func:`shortestTree` and :func:`dijkstra` of `QgsGraphAnalyzer <http://qgis.org/api/api/classQgsGraphAnalyzer.html>`_ class. It is recommended to use method :func:`dijkstra` because it works faster and uses memory more efficiently."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:174
# 399878de213c4a8b9703eedfbbdedeaf
msgid "The :func:`shortestTree` method is useful when you want to walk around the shortest path tree. It always creates new graph object (QgsGraph) and accepts three variables:"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:178
# aae4be3c2528493b92b75eb255f433b3
msgid "source --- input graph"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:179
# 1b43cdf8cf4b43819b36bd3b726c42ee
msgid "startVertexIdx --- index of the point on the tree (the root of the tree)"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:180
# ba1f3b2f6ba3432e963278939c2036c6
msgid "criterionNum --- number of edge property to use (started from 0)."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:186
# a28800a5d291475e91c41543ea2489d3
msgid "The :func:`dijkstra` method has the same arguments, but returns two arrays. In the first array element i contains index of the incoming edge or -1 if there are no incoming edges. In the second array element i contains distance from the root of the tree to vertex i or DOUBLE_MAX if vertex i is unreachable from the root."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:196
# c66776c2dcd741d590930670445e1983
msgid "Here is very simple code to display shortest path tree using graph created with :func:`shortestTree` method (select linestring layer in TOC and replace coordinates with yours one). **Warning**: use this code only as an example, it creates a lots of `QgsRubberBand <http://qgis.org/api/api/classQgsRubberBand.html>`_ objects and may be slow on large datasets."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:236
# 51e5f2027bcb4c77a15008dccad04637
msgid "Same thing but using :func:`dijkstra` method::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:271
# c56a3fccdb774472b99dcab9fee47cae
msgid "Finding shortest path"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:273
# 59064cd593624c509bd26c37699e7410
msgid "To find optimal path between two points the following approach is used. Both points (start A and end B) are \"tied\" to graph when it builds. Than using methods :func:`shortestTree` or :func:`dijkstra` we build shortest tree with root in the start point A. In the same tree we also found end point B and start to walk through tree from point B to point A. Whole algorithm can be written as::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:288
# c181c3b420564ec5839f3f2341cc98e3
msgid "At this point we have path, in the form of the inverted list of vertices (vertices are listed in reversed order from end point to start one) that will be visited during traveling by this path."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:292
# 77baf8fe07d548d5a15de4d2da24ae31
msgid "Here is the sample code for QGIS Python Console (you will need to select linestring layer in TOC and replace coordinates in the code with yours) that uses method :func:`shortestTree`::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:344
# dca9f4ec57814462a77863de62ff1652
msgid "And here is the same sample but using :func:`dikstra` method::"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:392
# 8062ec7169974c6cad4476d9379969f8
msgid "Areas of the availability"
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:394
# 713e0a4e09a045d199a4ba6a9e6aeea1
msgid "Area of availability for vertex A is a subset of graph vertices, that are accessible from vertex A and cost of the path from A to this vertices are not greater that some value."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:398
# 04eef9da0dca43399e2effbc77d1c003
msgid "More clearly this can be shown with the following example: \"There is a fire station. What part of city fire command can reach in 5 minutes? 10 minutes? 15 minutes?\". Answers on this questions are fire station's areas of availability."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:402
# ca4b674110cb4df9aba8b10327a11f37
msgid "To find areas of availablity we can use method :func:`dijksta` of the :class:`QgsGraphAnalyzer` class. It is enough to compare elements of cost array with predefined value. If cost[ i ] is less or equal than predefined value, than vertex i is inside area of availability, otherwise --- outside."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:407
# 071fd28f495e42e7b1a793643f63f7c4
msgid "More difficult it is to get borders of area of availablity. Bottom border --- is a set of vertices that are still accessible, and top border --- is a set of vertices which are not accesible. In fact this is simple: availability border passed on such edges of the shortest path tree for which start vertex is accessible and end vertex is not accessible."
msgstr ""

#: ../../source/docs/pyqgis_developer_cookbook/12_network_analysis.rst:413
# 9b40d9552fbe4fafa9b0f25af1637c50
msgid "Here is an example::"
msgstr ""

